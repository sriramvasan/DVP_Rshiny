source("~/Desktop/Monash_Studies/FIT5197 Stats/Applied/Week1/Week1QUiz.R")
source("~/Desktop/Monash_Studies/FIT5197 Stats/Applied/Week1/Week1QUiz.R", echo=TRUE)
boxplot(df$height)
boxplot(df$height)
title("boxplot for height")
layout(matrix(c(1, 2), nrow = 1))
# Create the first boxplot
boxplot(df$height, main = "Boxplot 1", ylab = "Values")
# Create the second boxplot
boxplot(df$weight, main = "Boxplot 2", ylab = "Values")
layout(matrix(c(1, 2), nrow = 1))
# Create the first boxplot
boxplot(df$height, main = "Height Distribution", ylab = "Height")
# Create the second boxplot
boxplot(df$weight, main = "Weight Distribution", ylab = "Weight")
#Double Vector
vecDbl=c(2, 3, 5)
#Double Vector
vecDbl=c(2, 3, 5)
typeof(vecDbl)
#Double Vector
vecDbl=c(2, 3, 5)
typeof(vecDbl)
#Logical vector
vecLogic=c(TRUE, FALSE, TRUE, FALSE, FALSE)
typeof(vecLogic)
#Character Vector
vecChar=c("aa", "bb", "cc", "dd", "ee")
typeof(vecChar)
#Indexing the vectors
vecChar[1]
vecChar[1:3]
#Updating the vectors
vecChar[1]='qq'
vecChar
curve( x^3/27 , from= 0, to =3)
curve(x^3, 0, 3)
+ curve(0)
curve(x^3, 0, 3)
+ curve(x*0)
curve(x^3, 0, 3)
curve(x^3/27, 0, 3)
m = quantile(x^3)
#Double Vector
vecDbl=c(2, 3, 5)
typeof(vecDbl)
#Logical vector
vecLogic=c(TRUE, FALSE, TRUE, FALSE, FALSE)
typeof(vecLogic)
#Character Vector
vecChar=c("aa", "bb", "cc", "dd", "ee")
typeof(vecChar)
#Indexing the vectors
vecChar[1]
vecChar[1:3]
#Updating the vectors
vecChar[1]='qq'
vecChar
#Create a list
myList<-list(x=c(82,67,70), y=c('Africa','Asia','Europe'), z=c(10,31,4))
myList#Pay attention that list items have names(x,y,z) in this example. however, having names for list components is not mandatory
#Check the structure of a list
str(myList)
#Access items of the list
myList[c(1:2)]# index using integer vector to access items. We access first and second items of the list
myList[-2]# using negative integer to exclude second component
myList[c("x","z")]# Access component names
myList[1]#Access to the first component of a list, returns another list
myList[[1]]#Access to the content of the first component of a list
myList[[1]][1]#Access to the first item of the first component of a list
#Modify the list
myList[[2]][1] <- 'AFRICA'
myList[[2]]
#Delete a component from a list
myList[[2]] <- NULL
myList
#Read a csv file
iris1 <- read.csv("iris.csv")
head(iris1)
levels(iris1$Species) #Check the limited values which variable 'species' can have
iris1$Species[iris1$Species == 'virginica'] <- 'new.species' #Try to update the values to a new value which does not exis in the levels. Read the error which you see after running this code
levels(iris1$Species) <- c(levels(iris1$Species), "new.species")#If you want to add a new value, say 'new.species' in this case, or update the previous values to a new value, you must add new.species to the levels first.
levels(iris1$Species)#Check the levels and make sure the new level is dded
iris1$Species[iris1$Species == 'virginica'] <- 'new.species'
#Another way of handling factors
#Force R to treat all columns which have string values as string and do not consider any column type as Factor by using parameter stringsAsFactors = FALSE.
iris4 <-read.csv("iris.csv", stringsAsFactors = FALSE)
str(iris4)
iris4$Species[iris4$Species == 'virginica'] <- 'new.species'
unique(iris4$Species)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
ped_wide <- read.csv("https://raw.githubusercontent.com/quangvanbui/FIT5145-data/master/melb_walk_wide.csv")
# Alternatively, read it from your working directory
# ped_wide <- ???("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
ped_wide <- read.csv("https://raw.githubusercontent.com/quangvanbui/FIT5145-data/master/melb_walk_wide.csv")
# Alternatively, read it from your working directory
# ped_wide <- ???("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
ped_wide <- read.csv("melb_walk_wide.csv")
# Alternatively, read it from your working directory
# ped_wide <- ???("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
# ped_wide <- ("https://raw.githubusercontent.com/quangvanbui/FIT5145-data/master/melb_walk_wide.csv")
# Alternatively, read it from your working directory
ped_wide <- read.csv("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
ped_wide <- read_csv("https://raw.githubusercontent.com/quangvanbui/FIT5145-data/master/melb_walk_wide.csv")
# Alternatively, read it from your working directory
ped_wide <- read.csv("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Load tidyverse
library(tidyverse)
# Read melb_walk.csv from GitHub URL and store in object named ped_wide
# ped_wide <- read_csv("https://raw.githubusercontent.com/quangvanbui/FIT5145-data/master/melb_walk_wide.csv")
# Alternatively, read it from your working directory
ped_wide <- read.csv("./melb_walk_wide.csv")
# Print ped_wide
paste(ped_wide)
# Print ped_wide
ped_wide
# Head of ped_wide
head(ped_view)
# Head of ped_wide
head(ped_wide)
# First and last date in the data
ped_wide %>%
arrange(ped_wide) %>%
summarise(first_date = Date(Date),
last_date = Date(Date))
# First and last date in the data
ped_wide %>%
arrange(ped_wide) %>%
summarise(first_date = first(Date),
last_date = last(Date))
a <- pbinom(x=5, n=10, prob= 0.5, log = FALSE)
print(a)
a <- pbinom(x=5, n=10, prob= 0.5, log = FALSE)
a <- pbinom(q=5, n=10, prob= 0.5, log = FALSE)
print(a)
a <- pbinom(q=5, n=10, prob= 0.5, log = FALSE)
a <- pbinom(q=5, size =10, prob= 0.5, log = FALSE)
print(a)
a <- pbinom(q=10, size =10, prob= 0.5, log = FALSE)
print(a)
a <- pbinom(q=5, size =10, prob= 0.5, log = FALSE)
print(a)
??exp()
# for P (x =1)
x <- 1
lambda = 4
prob <- ((lambda^x)*(exp(-lambda)))/ factorial(x)
print(prob)
# Read house price data
house_price <- read_csv("Melbourne_housing_FULL.csv")
# Load tidyverse
library(tidyverse)
# Read house price data
house_price <- read_csv("Melbourne_housing_FULL.csv")
# Load tidyverse
library(tidyverse)
# Read house price data
house_price <- read_csv("Melbourne_housing_FULL.csv")
View(house_price)
# Load tidyverse
library(tidyverse)
# Read house price data
houses <- read_csv("Melbourne_housing_FULL.csv")
# Head of houses
head(houses)
# Glimpse of houses
View(houses)
# Keep only variables Price, Rooms, Type, Distance, Bedroom2, Bathroom
houses <- houses.select(c('Price','Rooms','Type','Distance','Bedroom2', 'Bathroom'))
# Keep only variables Price, Rooms, Type, Distance, Bedroom2, Bathroom
houses_sub <- houses.select(c('Price','Rooms','Type','Distance','Bedroom2', 'Bathroom'))
# Keep only variables Price, Rooms, Type, Distance, Bedroom2, Bathroom
houses_sub <- houses.select(subset = c('Price','Rooms','Type','Distance','Bedroom2', 'Bathroom'))
# Keep only variables Price, Rooms, Type, Distance, Bedroom2, Bathroom
houses_sub <- houses %>% select( c('Price','Rooms','Type','Distance','Bedroom2', 'Bathroom'))
# Load GGally
library(GGally)
# Distribution of continuous numerical variables
houses_sub %>%
select(Distance, Price) %>%
ggpairs()
# Bar plots of discrete numerical variables
houses_sub %>%
select(-Distance, -Price, -Type) %>%
gather(Variable, Value) %>%
ggplot(aes(x = Value)) +
geom_bar() +
facet_wrap(~ Variable, scales = "free")
# Load visdat
???
# Map of data coloured by variable type and NA
houses_sub %>%
vis_???()
install.packages('visdat')
# Load visdat
library(visdat)
# Map of data coloured by variable type and NA
houses_sub %>%
vis_dat()
# Missingness map
houses_sub %>%
vis_miss()
# Load visdat
library(visdat)
# Map of data coloured by variable type and NA
houses_sub %>%
vis_dat() + ggplot2::theme(legend.position = bottom)
# Load visdat
library(visdat)
# Map of data coloured by variable type and NA
houses_sub %>%
vis_dat() + ggplot2::theme(legend.position = 'bottom')
# Missingness map
houses_sub %>%
vis_miss()
install.packages('naniar')
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_summary(houses_sub)
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_prop_summary(houses_sub) # miss_summary(houses_sub)
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_var_summary(houses_sub) # miss_summary(houses_sub)
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_var_summary(houses_sub)
naniar::miss_prop_summary(houses_sub)# miss_summary(houses_sub)
??miss_prop_summary
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_var_summary(houses_sub)
naniar::miss_prop_summary(houses_sub$Price)# miss_summary(houses_sub)
# Load naniar
library(naniar)
# Missing variables summary table
naniar::miss_var_summary(houses_sub)
naniar::miss_prop_summary(houses_sub)# miss_summary(houses_sub)
# Remove missing house price values
houses_sub <- houses_sub %>%
filter(!is.na(Price))
# Impute missing values in bed and bath with their mean
houses_sub_mean <- houses_sub %>%
impute_mean_at(vars(c("Bedroom2","Bathroom")))
miss_var_summary(houses_sub_mean)
# Scatter plot of bath vs. bed coloured by imputed values
ggplot(houses_sub_mean, aes(Bathroom, Bedroom2))+ geom_point(size = 3)
# Scatter plot of bath vs. bed coloured by imputed values
ggplot(houses_sub_mean, aes(Bathroom, Bedroom2))+ geom_point(size = 2)
# Linear regression
# Use houses_sub_shadow and not houses_sub_shadow_mean because houses_sub_shadow_mean
# has imputed missing values in bath and bed with the mean
# Run a linear regression model of bedroom on room
br2 <- lm(Bedroom2 ~ Rooms, data = houses_sub_shadow)
# Impute missing values for  bedroom and bathroom based on above regression
houses_sub_shadow_linreg <- houses_sub_shadow %>%
mutate(Bedroom2 = ifelse(is.na(Bedroom2), predict(br2, new = houses_sub_shadow), Bedroom2),
Bathroom = ifelse(is.na(Bathroom), predict(ba, new = houses_sub_shadow), Bathroom))
# Linear regression
# Use houses_sub_shadow and not houses_sub_shadow_mean because houses_sub_shadow_mean
# has imputed missing values in bath and bed with the mean
# Run a linear regression model of bedroom on room
br2 <- lm(Bedroom2 ~ Rooms, data = houses_sub_mean)
# Run a linear regression model of bathroom on room
ba <- lm(Bathroom ~ Rooms, data = houses_sub_mean)
# Impute missing values for  bedroom and bathroom based on above regression
houses_sub_shadow_linreg <- houses_sub_mean %>%
mutate(Bedroom2 = ifelse(is.na(Bedroom2), predict(br2, new = houses_sub_shadow), Bedroom2),
Bathroom = ifelse(is.na(Bathroom), predict(ba, new = houses_sub_shadow), Bathroom))
# Scatter plot of bath vs. bed coloured by imputed values
ggplot(houses_sub_shadow_linreg, aes(Bathroom, Bedroom2))+ geom_point(size = 2)
updateR()
require(installr)
library(shiny); runApp('Desktop/Monash_Studies/FIT5147 Data Viz/Assignments/Assignment R/PE2_Vasan_33514569.R')
library(readr)
PopupDB <- read_csv("Desktop/Monash_Studies/FIT5147 Data Viz/Assignments/DEP/PopupDB.csv")
View(PopupDB)
knitr::opts_chunk$set(echo = TRUE)
klippy::klippy(position = c('top', 'right'),
tooltip_message = 'Click to copy', tooltip_success = 'Copied!')
install.packages("lubricate")
install.packages("lubricate")
install.packages("lubricate")
mean_gdp_usa = mean(data_to_plot$`Country Name` == "United States", na.rm = TRUE)
df <- read_csv("World_Development_Indicators.csv", col_types = 'c')
library(tidyverse)
library(readr)
library(ggplot2)
df <- read_csv("World_Development_Indicators.csv", col_types = 'c')
head(df)
unique_series_values = unique(df$`Series Name`)
# showing the first 9 unique series
# Answer to  display first 9 uniuqe series
print(head(unique_series_values, 9))
fertitily_matches = unique_series_values[grepl('fertility', unique_series_values ,  ignore.case = TRUE)]
# Answer
print(
fertitily_matches
)
df_gdp <- df[ df$`Series Name` == "GDP (current US$)", ]
head(df_gdp)
df_gdp_2019 <- df_gdp %>%
#select(`Country Name`, `Country Code`, `Series Name`, `2019.00`)%>%
filter(!is.na(`2019.00`))%>%
arrange(`2019.00`)
df_gdp_2019_top5 <- head(df_gdp_2019,5)
df_gdp_2019_last5 <- tail(df_gdp_2019, 5)
best_worst_2019 <- rbind(df_gdp_2019_top5, df_gdp_2019_last5)
# answer Question 2
# showing the top 10 values of the filtered data
head(best_worst_2019,10)
best_worst_2010_2019 <- select(best_worst_2019, `Country Name`, `Country Code`, `Series Name` , `2010.00`:`2019.00`)
# answer question 3
summary(best_worst_2010_2019)
gdp_china <- best_worst_2019[best_worst_2019$`Country Name` == "China", ]
head(gdp_china)
year_columns <- names(select(gdp_china,'1960.00':'2019.00' ))
max_gdp_year <- year_columns[which.max(gdp_china[year_columns])]
min_gdp_year <- year_columns[which.min(gdp_china[year_columns])]
cat("Year with maximum GDP for China:", max_gdp_year, "\n")
cat("Year with minimum GDP for China:", min_gdp_year, "\n")
data_to_plot <- best_worst_2019 %>%
gather(key =Year, value = gdp_value, -`Series Name`, -`Series Code`, -`Country Code`, -`Country Name` )%>%
select(`Country Name`, Year, gdp_value)%>%
filter(!is.na(gdp_value) )
data_to_plot$Year <- as.numeric(data_to_plot$Year)
ggplot(data = data_to_plot, aes(x =Year, y = gdp_value,  color = `Country Name`)) +
geom_line() +
#geom_point()+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1) , axis.line = element_line(color = "black")) +
scale_x_log10() +
labs( title="World Gdp over the years", x = "year", y = "gdp_value")
data_to_plot <- data_to_plot %>%
mutate(Period = case_when(
Year >= 1960 & Year <= 1969 ~ "Period 1",
Year >= 1970 & Year <= 1979 ~ "Period 2",
Year >= 1980 & Year <= 1989 ~ "Period 3",
Year >= 1990 & Year <= 1999 ~ "Period 4",
Year >= 2000 & Year <= 2009 ~ "Period 5",
Year >= 2010 & Year <= 2019 ~ "Period 6",
TRUE ~ "Unknown"
))
# Computing average gdp value for each country and each period
average_gdp <- data_to_plot %>%
group_by(`Country Name`, Period) %>%
summarize(avg_gdp = mean(gdp_value), .groups = 'drop')
# Sorting the data by avg_gdp in descending order and display the first 10 records
top_10_average_gdp <- average_gdp %>%
arrange(desc(avg_gdp)) %>%
head(10)
# answer Question 6
# Displaying the first 10 records
print(top_10_average_gdp)
mean_gdp_usa = mean(data_to_plot$`Country Name` == "United States", na.rm = TRUE)
# imputing the missing values with the mean values
data_imputed <- data_to_plot%>%
mutate(gdp_value = ifelse(is.na(gdp_value) & `Country Name` == "United States", mean_gdp_usa, gdp_value) )
# answer Question 7
head(data_imputed[data_imputed$`Country Name` == "United States", ],10)
# Foreign investments vs the GDP for all countries
foreign_investment_gdp <- df %>%
select(`Country Name`, `Series Name` ,`Country Code`, `1960.00`:`2019.00`) %>%
filter(`Series Name` %in% c("GDP (current US$)", "Foreign direct investment, net inflows (BoP, current US$)") )%>%
gather(key = Year, value = factor_value ,-`Country Name` , -`Series Name`, -`Country Code`) %>%
spread(key = `Series Name` , value = factor_value)
gdp_foreign_investment_data <- foreign_investment_gdp %>%
select(`Country Name`, `Country Code`, `GDP` = `GDP (current US$)`, `Foreign_investment` = `Foreign direct investment, net inflows (BoP, current US$)`)%>%
filter(!is.na(Foreign_investment))%>%
filter(!is.na(GDP))
# Creating a scatterplot of GDP vs. Foreign Investments
ggplot(data = gdp_foreign_investment_data, aes(x = GDP, y = Foreign_investment)) +
geom_point() +
labs(x ="GDP (current US$)",y ="Foreign Investments",title ="GDP vs. Foreign Investments") +
theme_minimal()
# Calculating the correlation coefficient between GDP and Foreign investments
correlation_coefficient <- cor(gdp_foreign_investment_data$GDP, gdp_foreign_investment_data$Foreign_investment, use = "complete.obs")
# Printing the correlation coefficient
cat("Correlation between GDP and Foreign Investments is:", correlation_coefficient, "\n")
library(tidyverse)
library(readr)
library(ggplot2)
df <- read_csv("World_Development_Indicators.csv", col_types = 'c')
head(df)
unique_series_values = unique(df$`Series Name`)
# showing the first 9 unique series
# Answer to  display first 9 uniuqe series
print(head(unique_series_values, 9))
fertitily_matches = unique_series_values[grepl('fertility', unique_series_values ,  ignore.case = TRUE)]
# Answer
print(
fertitily_matches
)
df_gdp <- df[ df$`Series Name` == "GDP (current US$)", ]
head(df_gdp)
df_gdp_2019 <- df_gdp %>%
#select(`Country Name`, `Country Code`, `Series Name`, `2019.00`)%>%
filter(!is.na(`2019.00`))%>%
arrange(`2019.00`)
df_gdp_2019_top5 <- head(df_gdp_2019,5)
df_gdp_2019_last5 <- tail(df_gdp_2019, 5)
best_worst_2019 <- rbind(df_gdp_2019_top5, df_gdp_2019_last5)
# answer Question 2
# showing the top 10 values of the filtered data
head(best_worst_2019,10)
best_worst_2010_2019 <- select(best_worst_2019, `Country Name`, `Country Code`, `Series Name` , `2010.00`:`2019.00`)
# answer question 3
summary(best_worst_2010_2019)
gdp_china <- best_worst_2019[best_worst_2019$`Country Name` == "China", ]
head(gdp_china)
year_columns <- names(select(gdp_china,'1960.00':'2019.00' ))
max_gdp_year <- year_columns[which.max(gdp_china[year_columns])]
min_gdp_year <- year_columns[which.min(gdp_china[year_columns])]
cat("Year with maximum GDP for China:", max_gdp_year, "\n")
cat("Year with minimum GDP for China:", min_gdp_year, "\n")
data_to_plot <- best_worst_2019 %>%
gather(key =Year, value = gdp_value, -`Series Name`, -`Series Code`, -`Country Code`, -`Country Name` )%>%
select(`Country Name`, Year, gdp_value)%>%
filter(!is.na(gdp_value) )
data_to_plot$Year <- as.numeric(data_to_plot$Year)
ggplot(data = data_to_plot, aes(x =Year, y = gdp_value,  color = `Country Name`)) +
geom_line() +
#geom_point()+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1) , axis.line = element_line(color = "black")) +
scale_y_log10() +
labs( title="World Gdp over the years", x = "year", y = "gdp_value")
data_to_plot <- data_to_plot %>%
mutate(Period = case_when(
Year >= 1960 & Year <= 1969 ~ "Period 1",
Year >= 1970 & Year <= 1979 ~ "Period 2",
Year >= 1980 & Year <= 1989 ~ "Period 3",
Year >= 1990 & Year <= 1999 ~ "Period 4",
Year >= 2000 & Year <= 2009 ~ "Period 5",
Year >= 2010 & Year <= 2019 ~ "Period 6",
TRUE ~ "Unknown"
))
# Computing average gdp value for each country and each period
average_gdp <- data_to_plot %>%
group_by(`Country Name`, Period) %>%
summarize(avg_gdp = mean(gdp_value), .groups = 'drop')
# Sorting the data by avg_gdp in descending order and display the first 10 records
top_10_average_gdp <- average_gdp %>%
arrange(desc(avg_gdp)) %>%
head(10)
# answer Question 6
# Displaying the first 10 records
print(top_10_average_gdp)
mean_gdp_usa = mean(data_to_plot$`Country Name` == "United States", na.rm = TRUE)
# imputing the missing values with the mean values
data_imputed <- data_to_plot%>%
mutate(gdp_value = ifelse(is.na(gdp_value) & `Country Name` == "United States", mean_gdp_usa, gdp_value) )
# answer Question 7
head(data_imputed[data_imputed$`Country Name` == "United States", ],10)
# Foreign investments vs the GDP for all countries
foreign_investment_gdp <- df %>%
select(`Country Name`, `Series Name` ,`Country Code`, `1960.00`:`2019.00`) %>%
filter(`Series Name` %in% c("GDP (current US$)", "Foreign direct investment, net inflows (BoP, current US$)") )%>%
gather(key = Year, value = factor_value ,-`Country Name` , -`Series Name`, -`Country Code`) %>%
spread(key = `Series Name` , value = factor_value)
gdp_foreign_investment_data <- foreign_investment_gdp %>%
select(`Country Name`, `Country Code`, `GDP` = `GDP (current US$)`, `Foreign_investment` = `Foreign direct investment, net inflows (BoP, current US$)`)%>%
filter(!is.na(Foreign_investment))%>%
filter(!is.na(GDP))
# Creating a scatterplot of GDP vs. Foreign Investments
ggplot(data = gdp_foreign_investment_data, aes(x = GDP, y = Foreign_investment)) +
geom_point() +
labs(x ="GDP (current US$)",y ="Foreign Investments",title ="GDP vs. Foreign Investments") +
theme_minimal()
# Calculating the correlation coefficient between GDP and Foreign investments
correlation_coefficient <- cor(gdp_foreign_investment_data$GDP, gdp_foreign_investment_data$Foreign_investment, use = "complete.obs")
# Printing the correlation coefficient
cat("Correlation between GDP and Foreign Investments is:", correlation_coefficient, "\n")
library(shiny); runApp('Desktop/Monash_Studies/FIT5147 Data Viz/Assignments/DVP/Samples/code/DVP.R')
# before running the code please change the datasets locations
# specifying the path
mul_country <- read.csv("/Datasets/mul_country.csv")
setwd("~/Desktop/Monash_Studies/FIT5147 Data Viz/Assignments/DVP/Samples/code")
# before running the code please change the datasets locations
# specifying the path
mul_country <- read.csv("Datasets/mul_country.csv")
runApp('DVP.R')
